# Cursor Rules - Prueba T√©cnica Simetrik

## üéØ Contexto del Proyecto
Este es un proyecto para una prueba t√©cnica de **Prompt Engineer Junior** en Simetrik.
- Duraci√≥n: 7 horas efectivas
- Enfoque: Automatizaci√≥n con Python + APIs + IA + n8n
- Importancia de la documentaci√≥n: 10% de la evaluaci√≥n

## üìã Metodolog√≠a de Trabajo

### Respuestas Paso por Paso
- SIEMPRE dividir el trabajo en pasos peque√±os y manejables
- NO dar c√≥digo muy largo de una sola vez
- Explicar cada paso ANTES de implementarlo
- Preguntar si se entendi√≥ antes de continuar al siguiente paso
- Usar formato: "Paso X de Y: [T√≠tulo del paso]"

### Preguntas de Confirmaci√≥n
Despu√©s de cada explicaci√≥n importante, preguntar:
- "¬øQued√≥ claro este paso?"
- "¬øQuieres que avancemos o necesitas que profundice en algo?"
- "¬øTe hace sentido la l√≥gica de este paso?"

### Estructura de Cada Respuesta
1. **Explicar** qu√© vamos a hacer y por qu√©
2. **Mostrar** el c√≥digo o configuraci√≥n (en fragmentos peque√±os)
3. **Documentar** la decisi√≥n en la carpeta Ejecuci√≥n/
4. **Preguntar** si qued√≥ claro antes de continuar

## üìÅ Estructura de Documentaci√≥n

### Carpeta Ejecuci√≥n/
Crear archivos .md para documentar:
- `00_plan_general.md` - Planificaci√≥n y arquitectura
- `01_setup_entorno.md` - Configuraci√≥n inicial
- `02_notion_api.md` - Integraci√≥n con Notion
- `03_gemini_api.md` - Integraci√≥n con Gemini
- `04_pdf_processing.md` - Procesamiento de PDFs
- `05_monitoreo_cambios.md` - Sistema de monitoreo
- `06_generacion_onepager.md` - Generaci√≥n del One Pager
- `decisiones_tecnicas.md` - Registro de decisiones importantes
- `errores_y_soluciones.md` - Problemas encontrados y c√≥mo se resolvieron

Cada archivo debe contener:
- **Objetivo**: Qu√© se busca lograr
- **An√°lisis**: Opciones consideradas
- **Decisi√≥n**: Qu√© se eligi√≥ y por qu√©
- **Implementaci√≥n**: Pasos seguidos
- **Resultado**: Qu√© funcion√≥/no funcion√≥
- **Aprendizajes**: Qu√© se aprendi√≥

## üõ†Ô∏è Consideraciones T√©cnicas

### Python y Entorno
- Usar `uv` como gestor de paquetes y entornos
- Configuraci√≥n en `pyproject.toml`
- Variables de entorno en `.env` (NUNCA commitear claves)
- Config adicional en `config.yaml` si es necesario

### APIs y Autenticaci√≥n
- Notion API: Usar integraci√≥n oficial de Python (`notion-client`)
- Gemini API: Usar `google-generativeai`
- SIEMPRE validar respuestas de APIs
- Implementar manejo de errores con reintentos (m√°ximo 2)

### Estructura del C√≥digo
- C√≥digo MODULAR (funciones peque√±as con responsabilidad √∫nica)
- Docstrings en TODAS las funciones
- Type hints donde sea posible
- Nombres descriptivos (en ingl√©s):
  - `dod_text` (Definition of Done text)
  - `onepager_content`
  - `pdf_output`
  - `notion_page_id`

### Logging y Errores
- Usar m√≥dulo `logging` de Python
- Logs con timestamps y niveles (INFO, WARNING, ERROR) no usar emojis 
- Guardar logs en archivo `logs/automation.log`
- Ejemplo formato: `[2024-10-17 14:30:45] INFO: Estado cambiado a Regression`

### Testing
- Crear archivo `tests/` con tests b√°sicos
- Al menos test de funciones cr√≠ticas
- Usar `pytest` para tests

## üìù Criterios de Evaluaci√≥n (recordatorios)

### Parte 1 - Python + Gemini (60%)
- ‚úÖ Detecci√≥n autom√°tica de cambio de estado (25%)
- ‚úÖ Integraci√≥n con Gemini API (20%)
- ‚úÖ Calidad t√©cnica del c√≥digo (15%)

### Parte 2 - n8n (30%)
- ‚úÖ Dise√±o del flujo (15%)
- ‚úÖ Gesti√≥n multiling√ºe (15%)

### Documentaci√≥n (10%)
- ‚úÖ Claridad en decisiones t√©cnicas
- ‚úÖ Explicaci√≥n del proceso
- ‚úÖ README completo

## üé® Estilo de C√≥digo

### Formato Python
- PEP 8 compliant
- L√≠neas m√°ximo 100 caracteres
- 2 l√≠neas entre funciones de nivel superior
- Imports organizados: stdlib ‚Üí terceros ‚Üí propios

### Comentarios
- Comentarios en espa√±ol o ingl√©s (consistente)
- Explicar el "por qu√©", no el "qu√©"
- Docstrings en formato Google o NumPy

## üöÄ Orden de Implementaci√≥n Sugerido

### Fase 1: Setup y Preparaci√≥n
1. Configurar entorno virtual con uv
2. Instalar dependencias b√°sicas
3. Configurar autenticaci√≥n de APIs
4. Crear estructura de carpetas

### Fase 2: Conexi√≥n con APIs
5. Probar conexi√≥n con Notion API
6. Probar conexi√≥n con Gemini API
7. Implementar funciones b√°sicas de lectura

### Fase 3: Procesamiento
8. Extracci√≥n de texto del PDF
9. Construcci√≥n del prompt para Gemini
10. Generaci√≥n del One Pager

### Fase 4: Automatizaci√≥n
11. Sistema de monitoreo de cambios
12. Actualizaci√≥n en Notion
13. Generaci√≥n de PDF final

### Fase 5: Testing y Documentaci√≥n
14. Tests b√°sicos
15. Documentaci√≥n completa
16. README final

## üí° Tips Importantes

### Sobre Gemini
- El modelo correcto es `gemini-pro` o `gemini-1.5-pro`
- Estructurar bien el prompt con las 8 secciones requeridas
- Incluir ejemplos en el prompt si es necesario
- Validar que la respuesta tenga todas las secciones

### Sobre Notion
- Notion API usa UUIDs con guiones
- Los campos se llaman "properties"
- Para archivos/PDFs usar "files" property
- Necesitas permisos de lectura y escritura

### Sobre PDFs
- `pdfplumber` es excelente para extracci√≥n de texto
- `reportlab` o `weasyprint` para generaci√≥n
- Validar que el texto extra√≠do sea legible
- Manejar encoding UTF-8

### Sobre el Monitoreo
- Polling cada 5 minutos es razonable
- Guardar √∫ltimo estado conocido para comparar
- Usar `time.sleep(300)` para 5 minutos
- Considerar usar `schedule` library

## üì¶ Dependencias Sugeridas

```toml
[project.dependencies]
# APIs
notion-client = "^2.0.0"
google-generativeai = "^0.3.0"

# PDF Processing
pdfplumber = "^0.11.0"
reportlab = "^4.0.0"
# o weasyprint = "^60.0"

# Utilities
python-dotenv = "^1.0.0"
pyyaml = "^6.0"
requests = "^2.31.0"

# Logging & Monitoring
schedule = "^1.2.0"

# Testing
pytest = "^7.4.0"
```

## üîê Seguridad

- NUNCA commitear `.env` (agregarlo a .gitignore)
- NUNCA hardcodear API keys
- Usar variables de entorno para credenciales
- Rotar claves despu√©s de la prueba

## üìä Estructura de Archivos Esperada

```
Prueba/
‚îú‚îÄ‚îÄ contextoXpunto/          # Contexto de la prueba
‚îú‚îÄ‚îÄ Ejecuci√≥n/               # Documentaci√≥n paso a paso
‚îú‚îÄ‚îÄ src/                     # C√≥digo fuente
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ notion_client.py     # Cliente Notion
‚îÇ   ‚îú‚îÄ‚îÄ gemini_client.py     # Cliente Gemini
‚îÇ   ‚îú‚îÄ‚îÄ pdf_processor.py     # Procesamiento PDFs
‚îÇ   ‚îú‚îÄ‚îÄ monitor.py           # Sistema monitoreo
‚îÇ   ‚îî‚îÄ‚îÄ main.py              # Punto de entrada
‚îú‚îÄ‚îÄ tests/                   # Tests
‚îú‚îÄ‚îÄ output/                  # PDFs generados
‚îú‚îÄ‚îÄ logs/                    # Archivos de log
‚îú‚îÄ‚îÄ .env                     # Variables de entorno
‚îú‚îÄ‚îÄ config.yaml              # Configuraci√≥n
‚îú‚îÄ‚îÄ pyproject.toml           # Dependencias
‚îî‚îÄ‚îÄ README.md                # Documentaci√≥n principal
```

## üéØ Recordatorios Finales

1. **Calidad > Cantidad**: Mejor c√≥digo claro que c√≥digo "perfecto"
2. **Documentar decisiones**: Explica por qu√© elegiste X sobre Y
3. **Manejo de errores**: Siempre anticipar qu√© puede fallar
4. **Logs descriptivos**: Facilitan debugging y demuestran profesionalismo
5. **Modularidad**: Funciones peque√±as y reutilizables
6. **Tests b√°sicos**: Aunque sean simples, demuestran buenas pr√°cticas

## ü§ù Estilo de Comunicaci√≥n

- Siempre responder en espa√±ol
- Usar lenguaje claro y directo
- Explicar t√©rminos t√©cnicos cuando sea necesario
- Celebrar peque√±os logros para mantener motivaci√≥n
- Ser honesto sobre dificultades o limitaciones

